<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:fa="http://schemas.fontawesome.io/icons/">

    <Style TargetType="Expander">
        <Setter Property="FontFamily" Value="{StaticResource FontTheme}" />
        <Setter Property="FontSize" Value="12" />
        <Setter Property="FontWeight" Value="DemiBold" />
        <Setter Property="Foreground" Value="{StaticResource ContentLabelForegroundColor}" />
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Focusable" Value="False" />
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Expander">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Name="ContentRow" Height="0"/>
                        </Grid.RowDefinitions>
                        <Border Name="Border"
                                Grid.Row="0"
                                BorderBrush="{StaticResource ExpanderBorderColor}"
                                BorderThickness="1"
                                CornerRadius="1" >
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*" />
                                    <ColumnDefinition Width="30" />
                                </Grid.ColumnDefinitions>
                                <!-- The following puts the toggle button in the right hand column, just like I want! -->
                                <ToggleButton Grid.Column="1"
                                              IsChecked="{Binding Path=IsExpanded,Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                              OverridesDefaultStyle="True"
                                              Style="{DynamicResource ExpanderToggle}"
                                              Margin="-2"/>
                                <ContentPresenter Grid.Column="0"
                                                  Margin="4"
                                                  ContentSource="Header"
                                                  RecognizesAccessKey="True" />
                            </Grid>
                        </Border>
                        <Border Name="Content"
                                Grid.Row="1"
                                Margin="0,2,0,0"
                                Background="Transparent"
                                BorderBrush="{StaticResource ExpanderBorderColor}"
                                BorderThickness="1,0,1,1"
                                CornerRadius="0,0,4,4" >
                            <ContentPresenter Margin="4" />
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="True">
                            <Setter TargetName="ContentRow" Property="Height" Value="{Binding ElementName=Content, Path=DesiredHeight}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ExpanderToggle" TargetType="{x:Type ToggleButton}">
        <Setter Property="FontFamily" Value="{StaticResource FontTheme}" />
        <Setter Property="Background" Value="{StaticResource ExpanderToggleButtonBackgroundColor}" />
        <Setter Property="BorderBrush" Value="{StaticResource ToggleButtonBorderColor}" />
        <Setter Property="Foreground" Value="{StaticResource ExpanderToggleButtonForegroundColor}"/>
        <Setter Property="FontSize" Value="15"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="Border"  
                               CornerRadius="0" 
                               BorderThickness="1"
                               Background="{TemplateBinding Background}"
                               BorderBrush="{TemplateBinding BorderBrush}">
                        <ContentPresenter Margin="2"
                                 HorizontalAlignment="Center"
                                 VerticalAlignment="Center"
                                 RecognizesAccessKey="True"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="Border" Property="Background" Value="{StaticResource ToggleButtonDisabledBackgroundColor}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource ToggleButtonDisabledBorderColor}" />
                            <Setter Property="Foreground" Value="{StaticResource ToggleButtonDisabledForegroundColor}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource ExpanderToggleButtonMouseOverBorderColor}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="{StaticResource ExpanderToggleButtonPressedColor}" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="fa:Awesome.Content" Value="AngleDoubleUp"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="false">
                            <Setter Property="fa:Awesome.Content" Value="AngleDoubleDown"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>